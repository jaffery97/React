{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Counter","increment","state","count","setState","decrement","reset","toggleIn","toggleDe","className","this","type","onClick","style","height","width","borderColor","herf","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAmHeA,E,YA/Gb,aAAe,IAAD,8BACZ,+CAOFC,UAAY,WAGN,EAAKC,MAAMC,MAAQ,GACrB,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,IAG5B,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,MAjBlB,EAuBdE,UAAY,WACN,EAAKH,MAAMC,MAAQ,EACrB,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,IAG5B,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,KA9BlB,EAoCdG,MAAQ,WACN,EAAKF,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,KAtChB,EA0CdI,SAAW,WACL,EAAKL,MAAMC,MAAQ,GACrB,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,KAG5B,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,MAjDlB,EAuDdK,SAAW,WACL,EAAKN,MAAMC,MAAQ,EACrB,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,KAG5B,EAAKC,SAAS,CACZD,MAAO,EAAKD,MAAMC,MAAQ,KA5D9B,EAAKD,MAAQ,CACXC,MAAO,GAHG,E,sEAqEZ,OACE,yBAAKM,UAAW,aAChB,yBAAKA,UAAW,UAAhB,aAEA,yBAAKA,UAAW,WAChB,gCACEC,KAAKR,MAAMC,MADb,KAGA,4BAAQQ,KAAO,SACfC,QACEF,KAAKT,WAFP,OAIA,4BAAQU,KAAO,SACfC,QACEF,KAAKL,WAFP,OAKA,4BAAQM,KAAO,SACfC,QACEF,KAAKH,UAFP,SAIA,4BAAQI,KAAO,SACfC,QACEF,KAAKF,UAFP,SAIA,4BAAQG,KAAO,SACfC,QACEF,KAAKJ,OAFP,YAME,wBAAIG,UAAU,UAAd,IAAwB,wBAAII,MAAO,CACvCC,OAAQ,GACRC,MAAO,IACPC,YAAc,SAHV,sCAI+B,uBAAGC,KAAK,uBAAR,qB,GAzGjBC,aCSFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.59eeb452.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Counter extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    }\n  }\n  // this is where we are going to put our methods.\n\n  increment = () => {\n\n\n    if (this.state.count < 20) {\n      this.setState({\n        count: this.state.count + 1\n      })\n    } else {\n      this.setState({\n        count: this.state.count = 20\n      })\n\n    }\n\n  }\n  decrement = () => {\n    if (this.state.count > 0) {\n      this.setState({\n        count: this.state.count - 1\n      })\n    } else {\n      this.setState({\n        count: this.state.count = 0\n      })\n\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      count: this.state.count = 0\n    })\n  }\n\n  toggleIn = () => {\n    if (this.state.count < 20) {\n      this.setState({\n        count: this.state.count + 10\n      })\n    } else {\n      this.setState({\n        count: this.state.count = 20\n      })\n    }\n\n  }\n\n  toggleDe = () => {\n    if (this.state.count > 0) {\n      this.setState({\n        count: this.state.count - 10\n      })\n    } else {\n      this.setState({\n        count: this.state.count = 0\n      })\n    }\n  }\n\n  render() {\n    let color = 'red';\n    return (\n      <div className= \"container\">\n      <nav className= \"navbar\"> Counter < /nav>\n\n      <div className= \"counter\">\n      <h1 > {\n        this.state.count\n      } </h1>\n      <button type = \"button\"\n      onClick = {\n        this.increment\n      } > + </button>\n      <button type = \"button\"\n      onClick = {\n        this.decrement\n      } > - </button>\n\n      <button type = \"button\"\n      onClick = {\n        this.toggleIn\n      } > 10+ < /button>\n      <button type = \"button\"\n      onClick = {\n        this.toggleDe\n      }> 10- </button>\n      <button type = \"button\"\n      onClick = {\n        this.reset\n      } > Reset </button>\n\n      </div>\n        <h1 className=\"footer\"> <hr style={{\n    height: .5,\n    width: 230,\n    borderColor : 'red'\n}}/> First React Project | Copyright @ <a herf=\"http://mhjaofry.com\"> MH Jafory </a></h1>\n      </div>\n\n\n    )\n  }\n}\nexport default Counter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}